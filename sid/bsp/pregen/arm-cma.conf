# sid configuration file
# created by Id: configrun-sid.in,v 1.39 2006/10/18 18:30:52 brolley Exp 
# run by alan @ bubble (Linux) at Wed Sep 18 12:13:52 CST 2013
# args: --cpu=arm --no-run --gdb=5000 --board=cma110:cma222-uart1:gdb -EL
load libaudio.la audio_component_library
load libcache.la cache_component_library
load libcgencpu.la cgen_component_library
load libconsoles.la console_component_library
load libgdb.la gdb_component_library
load libgloss.la gloss_component_library
load libglue.la glue_component_library
load libhd44780u.la hd44780u_component_library
load libide.la ide_component_library
load libinterrupt.la interrupt_component_library
load libloader.la loader_component_library
load libmapper.la mapper_component_library
load libmemory.la mem_component_library
load libmmu.la mmu_component_library
load libparport.la parport_component_library
load libprof.la prof_component_library
load librtc.la rtc_component_library
load libsched.la sched_component_library
load libtimers.la timer_component_library
load libuart.la uart_component_library
load libx86.la x86_component_library
set main persistent? true
# first section
new hw-cpu-arm7t cpu
new hw-mapper-basic cpu-mapper
new hw-glue-sequence-8 init-sequence
new hw-glue-sequence-1 hw-reset-net
new hw-glue-sequence-8 deinit-sequence
new hw-glue-sequence-1 yield-net
new hw-glue-sequence-2 cache-flush-net
new sid-sched-host-accurate host-sched
new sid-sched-sim target-sched
# cma110/cma222 specific parts
new hw-timer-arm/ref-sched timer
new hw-interrupt-cogent/cma222 intctrl
# cma110 common parts
new hw-uart-ns16550 uart1
new hw-uart-ns16550 uart2
new hw-parport-ps/2 parport
new hw-rtc-ds1642 rtc
new hw-lcd-hd44780u-a02 lcd
new hw-visual-lcd display
# cpu gdb
new sw-debug-gdb cpu-gdb
new sid-io-socket-server cpu-gdb-socket
# memory region 1 (0x00000000,0x00800000)
new hw-memory-ram/rom-basic mem1
# second section
# settings
set cpu step-insn-count 10000
set host-sched num-clients 10 # large enough?
set target-sched num-clients 10 # large enough?
# pin connections
connect-pin main perform-activity -> host-sched advance
connect-pin main perform-activity -> target-sched advance
connect-pin main starting -> init-sequence input
connect-pin main stopping -> deinit-sequence input
connect-pin init-sequence output-0 -> hw-reset-net input
connect-pin hw-reset-net output-0 -> cpu reset!
set target-sched 0-name "CPU stepping"
connect-pin target-sched 0-event -> cpu step!
connect-pin target-sched 0-control <- cpu step-cycles
connect-pin target-sched time-query <- cpu time-query
connect-pin target-sched time-high -> cpu time-high
connect-pin target-sched time-low -> cpu time-low
connect-pin yield-net output-0 -> cpu yield
connect-pin yield-net output-0 -> host-sched yield
connect-bus cpu insn-memory cpu-mapper access-port
connect-bus cpu data-memory cpu-mapper access-port
# cma222 control connections
connect-pin target-sched 2-control <- timer divided-clock-control
connect-pin target-sched 2-event -> timer divided-clock-event
connect-pin timer interrupt -> intctrl interrupt-source-4
connect-pin intctrl interrupt -> cpu nirq
# connect the on-cpu board devices
connect-bus cpu-mapper intctrl:[0xF600000,0xF600037] intctrl irq-registers
connect-bus cpu-mapper timer:[0xF700020,0xF70003F] timer registers
# cma110 control connections
connect-pin hw-reset-net output-0 -> uart1 Reset
connect-pin hw-reset-net output-0 -> uart2 Reset
connect-pin hw-reset-net output-0 -> timer reset
connect-pin uart1 INTR -> intctrl interrupt-source-2
connect-pin uart2 INTR -> intctrl interrupt-source-1
connect-pin parport INTP -> intctrl interrupt-source-4
# configure the clock
set host-sched num-clients 10
set host-sched 0-regular? 1
set host-sched 0-time 1000 # 1 sec
connect-pin host-sched 0-event -> rtc clock
connect-pin rtc clock-control -> host-sched 1-control
connect-pin rtc clock-event <- host-sched 1-event
# configure the lcd
#set display width 40 # 8 chars X 5 pixels per char
# note that hw-lcd-hd44780u may not support width of 80; this board
# has one though.
set display width 80 # 16 chars X 5 pixels per char
set display height 16 # two lines of 8 pixels
connect-pin host-sched 9-event -> lcd refresh-sync-event
connect-pin host-sched 9-control <- lcd refresh-sync-control
connect-pin lcd row-col -> display row-col
connect-pin lcd FR -> display FR
# memory map
# 8MB main memory
#connect-bus PCI pcibus:[0x4000000,0x5FEFFFF] pcibus config-space
#connect-bus ??? ??????:[0x5FF0000,0x5FFFFFF] v360epc registers
# ARM EPROM/FLASH memory
connect-bus cpu-mapper rtc:[0xE800000,0xE803FFF] rtc read-write-port
connect-bus cpu-mapper uart1:[0xE900000,0xE90001F,4,1] uart1 Bus
connect-bus cpu-mapper uart2:[0xE900020,0xE90003F,4,1] uart2 Bus
connect-bus cpu-mapper parport:[0xE900080,0xE90009F,4,1] parport Bus
# kbd/ms
connect-bus cpu-mapper lcd:[0xE900100,0xE90010F,4,1] lcd bus
# DIP switches
#connect-bus PCI pcibus:[0xF200000,0xF2FFFFF] pcibus control-registers
# set uart unframed mode
set uart1 sio-framing? 0
set uart2 sio-framing? 0
set cpu engine-type pbb
# cpu-gdb
relate cpu-gdb cpu cpu
relate cpu-gdb cfgroot main
relate cpu-gdb target-schedulers target-sched
relate cpu-gdb host-schedulers host-sched
connect-pin cpu-gdb process-signal -> main stop!
connect-pin init-sequence output-3 -> cpu-gdb init
connect-pin deinit-sequence output-5 -> cpu-gdb deinit
connect-pin cpu-gdb yield -> yield-net input
connect-pin cpu-gdb flush-icache -> cache-flush-net input
connect-pin cache-flush-net output-1 -> cpu flush-icache
connect-pin cpu-gdb restart -> hw-reset-net input
set cpu-gdb exit-on-detach? 1
# cpu-gdb-socket
connect-pin init-sequence output-2 -> cpu-gdb-socket init
connect-pin deinit-sequence output-6 -> cpu-gdb-socket fini
connect-pin cpu-gdb-socket rx -> cpu-gdb remote-rx
connect-pin cpu-gdb-socket tx <- cpu-gdb remote-tx
connect-pin host-sched 6-event -> cpu-gdb-socket poll-event
connect-pin host-sched 6-control <- cpu-gdb-socket poll-control
set cpu-gdb-socket sockaddr-local 0.0.0.0:5000
# gdb w/o gloss
connect-pin cpu trap <-> cpu-gdb trap
connect-pin cpu trap-code -> cpu-gdb trap-code
# uart1 <-> cpu-gdb also
connect-pin uart1 Sout -> cpu-gdb target-tx
set cpu endian little
# memory region 1 (0x00000000,0x00800000) configuration
set mem1 size 8388608
connect-bus cpu-mapper mem1:[0,8388607] mem1 read-write-port
