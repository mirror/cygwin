dnl Process this file with autoconf to produce a configure script.
AC_INIT(Makefile.in)
AC_CONFIG_AUX_DIR(../..)
AM_INIT_AUTOMAKE(sid,0.1)
AM_CONFIG_HEADER(sidconfutil.h:sidconfutil.in)

AM_MAINTAINER_MODE

AC_EXEEXT
AC_PROG_CXXCPP
AC_PROG_MAKE_SET
AC_LANG_CPLUSPLUS

AC_HEADER_STDC

dnl SID compile time requirements
AC_CHECK_HEADERS(sstream strstream.h)
AC_CHECK_FUNCS(strerror)

dnl debugging functions
AC_ARG_ENABLE(assert,
[  --disable-assert        disable run-time assertion checking [default=enabled]],
[
  case "${enable_assert}" in
    yes)  ;;
    no)   ;;
    *)    AC_MSG_ERROR([bad value ${enableval} given for assert option]) ;;
  esac
])
if test "${enable_assert}" = "no"; then
   AC_DEFINE(NDEBUG, 1, [Define to disable run-time assert() checking.])
fi

AC_MSG_CHECKING([whether std:: prefix works for <cctype> functions])
AC_CACHE_VAL(sid_cv_cctype_std,
	AC_TRY_COMPILE([#include <cctype>],[
  if (std::isspace(' '))
    return 0; 
  else
    return 1;
],[sid_cv_cctype_std="yes"],[sid_cv_cctype_std="no"]))
if test "${sid_cv_cctype_std}" = "yes"; then
	AC_DEFINE(STD_CCTYPE, 1, [Define if std:: prefix works for <cctype> functions])
fi
AC_MSG_RESULT([$sid_cv_cctype_std])

AC_MSG_CHECKING([whether __builtin_expect is supported])
AC_CACHE_VAL(sid_cv_builtin_expect,
	AC_TRY_COMPILE([],[
  if (__builtin_expect (2, 2))
    return 0; 
  else
    return 1;
],[sid_cv_builtin_expect="yes"],[sid_cv_builtin_expect="no"]))
if test "${sid_cv_builtin_expect}" = "yes"; then
	AC_DEFINE(HAVE_BUILTIN_EXPECT, 1, [Define if compiler supports __builtin_expect])
fi
AC_MSG_RESULT([$sid_cv_builtin_expect])
		

if test "${exec_prefix}" = "NONE"; then
	sid_exec_prefix=${prefix}
else
	sid_exec_prefix=${exec_prefix}
fi
AC_DEFINE_UNQUOTED(SID_EXEC_PREFIX,"$sid_exec_prefix",[Define to build-time exec-prefix])

dnl Outputs
AC_OUTPUT(Makefile)
